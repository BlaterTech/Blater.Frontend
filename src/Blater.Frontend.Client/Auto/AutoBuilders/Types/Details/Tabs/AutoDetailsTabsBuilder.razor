@inherits AutoDetailsBuilder<T>
@typeparam T where T : Blater.Frontend.Client.Contracts.Bases.BaseFrontendModel


<BlaterCascadingValue
    Id="@CascadingValue">
    @if (Loading)
    {
        <MudProgressCircular
            Color="Color.Primary"
            Indeterminate="true"/>
    }
    else
    {
        <MudGrid>
            <MudItem
                xs="12">
                <MudCard
                    Class="@($"my-4 pa-4 {DetailsTabsConfiguration.ExtraClass}")">
                    <MudText
                        Typo="Typo.h4">
                        <b>@GetTitleValue(DetailsTabsConfiguration)</b>
                    </MudText>
                </MudCard>
            </MudItem>
            @if (Id == Ulid.Empty)
            {
                <MudItem
                    xs="12">
                    <MudCard
                        Class="@($"my-4 pa-4")">
                        <MudText
                            Typo="Typo.h5">
                            @LocalizationService.GetValue("ItemNotFound")
                        </MudText>
                    </MudCard>
                </MudItem>
            }
            else
            {
                <MudItem
                    xs="12">
                    <MudTabs
                        Elevation="2"
                        Rounded="true"
                        ApplyEffectsToContainer="true"
                        AlwaysShowScrollButtons="true"
                        PanelClass="">
                        @foreach (var tab in DetailsTabsConfiguration.Panels)
                        {
                            <MudTabPanel
                                Text="@GetTitleValue(tab)"
                                Icon="@(tab.Icon?.ToString() ?? "")">
                                @foreach (var group in tab.Groups)
                                {
                                    <MudCard Class="pa-6 mt-1">
                                        <MudGrid>
                                            <MudItem
                                                xs="12"
                                                Class="d-flex">
                                                <MudText
                                                    Typo="Typo.h6">
                                                    @GetGroupTitleValue(group)
                                                </MudText>
                                                @if (group.EnableEditButton)
                                                {
                                                    <MudSpacer/>
                                                    <MudIconButton
                                                        Variant="Variant.Filled"
                                                        Color="Color.Primary"
                                                        Icon="@Material.Outlined.Edit"
                                                        OnClick="@(async () => await EditCallback.InvokeAsync(Model))"/>
                                                }
                                            </MudItem>
                                            <MudItem
                                                xs="12">
                                                <MudSimpleTable
                                                    Style="overflow-x: auto;"
                                                    Elevation="0"
                                                    Striped="true">
                                                    <thead>
                                                    @{
                                                        var heads = group.Components
                                                                         .Where(x => !string.IsNullOrWhiteSpace(x.HeadTitle))
                                                                         .ToList();

                                                        if (heads.Count > 0)
                                                        {
                                                            <tr>
                                                                @foreach (var head in heads)
                                                                {
                                                                    <th>@head.HeadTitle</th>
                                                                }
                                                            </tr>
                                                        }
                                                    }
                                                    </thead>
                                                    <tbody>
                                                    @{
                                                        foreach (var component in group.Components)
                                                        {
                                                            @RenderComponents(component)
                                                        }
                                                    }
                                                    </tbody>
                                                </MudSimpleTable>
                                            </MudItem>
                                        </MudGrid>
                                    </MudCard>
                                }
                            </MudTabPanel>
                        }
                    </MudTabs>
                </MudItem>
            }
        </MudGrid>
    }
</BlaterCascadingValue>