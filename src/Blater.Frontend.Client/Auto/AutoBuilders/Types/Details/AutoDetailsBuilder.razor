@inherits BaseAutoComponentBuilder<T>
@typeparam T where T : Blater.Frontend.Client.Models.Bases.BaseFrontendModel

<BlaterCascadingValue
    T="T"
    Id="@CascadingValue">
    @if (Loading)
    {
        <MudProgressCircular
            Color="Color.Primary"
            Indeterminate="true"/>
    }
    else
    {
        <MudGrid>
            <MudItem
                xs="12">
                <MudCard
                    Class="@($"my-4 pa-4 {DetailsConfiguration.ExtraClass}")">
                    <MudText
                        Typo="Typo.h4">
                        @GetTitleValue(DetailsConfiguration)
                    </MudText>
                </MudCard>
            </MudItem>
            @if (Id == Ulid.Empty)
            {
                <MudItem
                    xs="12">
                    <MudCard
                        Class="@($"my-4 pa-4 {DetailsConfiguration.ExtraClass}")">
                        <MudText
                            Typo="Typo.h5">
                            @LocalizationService.GetValue("ItemNotFound")
                        </MudText>
                    </MudCard>
                </MudItem>
            }
            else
            {
                if (DetailsConfiguration.AvatarConfiguration is { EnableAvatarModel: true })
                {
                    <MudItem
                        xs="12">
                        <MudCard
                            Style="background-image: linear-gradient(to bottom, transparent 50%, var(--mud-palette-surface) 50%), url('https://liporstoragepulic.blob.core.windows.net/images/15518074_5594016 1.png');"
                            Class="@($"pa-4 d-flex justify-center align-center flex-column gap-2 {DetailsConfiguration.AvatarConfiguration.ExtraClass}")">

                            <MudAvatar
                                Elevation="25"
                                Style="
                                width: 128px;
                                height: 128px;
                                border-radius: 50%;
                                border: 2px solid #FFFFFF;
                                background-color: #FFFFFF;"
                                Class="z-10"
                                Size="Size.Large">
                                <MudImage
                                    Src="@DetailsConfiguration.AvatarConfiguration.AvatarUrl"/>
                            </MudAvatar>

                            <MudText
                                Typo="Typo.h5"
                                Align="Align.Center">
                                @GetAvatarTitleValue(DetailsConfiguration.AvatarConfiguration)
                            </MudText>
                            <MudText
                                Typo="Typo.h6"
                                Align="Align.Center">
                                @GetAvatarSubTitleValue(DetailsConfiguration.AvatarConfiguration)
                            </MudText>
                        </MudCard>
                    </MudItem>
                }

                <MudItem
                    xs="12">
                    <MudCard
                        Class="@($"my-4 pa-4 {DetailsConfiguration.ExtraClass}")">
                        <MudGrid
                            Spacing="2">
                            @foreach (var group in DetailsConfiguration.Groups)
                            {
                                <MudItem xs="12" Class="d-flex">
                                    <MudText Typo="Typo.h6">@GetGroupTitleValue(group)</MudText>
                                    @if (group.EnableEditButton)
                                    {
                                        <MudSpacer/>
                                        <MudIconButton
                                            Variant="Variant.Filled"
                                            Color="Color.Primary"
                                            Icon="@Material.Outlined.Edit"
                                            OnClick="@(async () => await EditCallback.InvokeAsync(Model))"/>
                                    }
                                </MudItem>
                                <MudItem
                                    xs="12">
                                    <MudSimpleTable
                                        Style="overflow-x: auto;"
                                        Elevation="0"
                                        Striped="true">
                                        <thead/>
                                        <tbody>
                                        @foreach (var component in group.Components
                                                                        .Where(x => x is { SeparateCard: false, SeparateComponent: false }))
                                        {
                                            @RenderComponents(component)
                                        }
                                        </tbody>
                                    </MudSimpleTable>
                                </MudItem>
                            }
                        </MudGrid>
                    </MudCard>
                </MudItem>

                foreach (var separateCard in DetailsConfiguration
                                            .Groups
                                            .SelectMany(x => x.Components
                                                              .Where(c => c.SeparateCard)))
                {
                    <MudItem
                        xs="12">
                        <MudCard
                            Class="my-4 pa-4">
                            @RenderComponents(separateCard, false)
                        </MudCard>
                    </MudItem>
                }

                foreach (var separateCard in DetailsConfiguration
                                            .Groups
                                            .SelectMany(x => x.Components
                                                              .Where(c => c.SeparateComponent)))
                {
                    <MudItem
                        xs="12">
                        <div class="my-4">
                            @RenderComponents(separateCard, false)
                        </div>
                    </MudItem>
                }


                if (DetailsConfiguration.EnableBackButton)
                {
                    <MudItem
                        xs="12">
                        <div
                            class="flex justify-start gap-4 mt-4">
                            <MudButton
                                Variant="Variant.Filled"
                                OnClick="@(async () => await NavigationService.GoBack())">
                                @LocalizationService.GetValue("BackButton")
                            </MudButton>
                        </div>
                    </MudItem>
                }
            }
        </MudGrid>
    }
</BlaterCascadingValue>