@inherits BaseAutoComponentBuilder<T>
@typeparam T where T : Blater.Frontend.Client.Models.Bases.BaseFrontendModel

<BlaterCascadingValue
    T="T"
    Id="@CascadingValue">
   @if (EnablePrincipalTitle)
   {
       <MudCard Elevation="0" Class="pa-4 mb-2 mud-height-full">
           <MudText Typo="Typo.h5">
               @GetTitleValue(FormConfiguration!)
           </MudText>
       </MudCard>
   }

    <MudCard
        Elevation="0"
        Class="pa-4">
        <MudForm
            @ref="@_form"
            @bind-IsValid="@IsValid"
            Model="@Model"
            Validation="@ModelValidator?.ValidateValue"
            ValidationDelay="0">
            <MudGrid
                Spacing="@(GridConfiguration?.Spacing ?? 2)">
                @{
                    var breakpointValue = 12;
                    if (AvatarModelConfiguration is { EnableAvatarModel: true })
                    {
                        const int breakpointAvatarModel = 3;
                        breakpointValue -= breakpointAvatarModel;
                        <MudItem
                            id="form-with-avatar"
                            xs="@breakpointAvatarModel"
                            Style="@(AvatarModelConfiguration.ExtraStyle)"
                            Class="@($"d-flex mud-height-full mud-width-full {AvatarModelConfiguration.ExtraClass}")">
                            <div
                                id="avatar-container">
                                @*todo: criar AutoImageCircleInput*@
                            </div>
                        </MudItem>
                    }

                    @RenderFormInputs(breakpointValue)
                }
            </MudGrid>
        </MudForm>

        @if (EnableActionsButtons)
        {
            <MudDivider
                DividerType="@ActionConfiguration.DividerType"
                Class="@($"my-6 {ActionConfiguration.DividerExtraClass}")"/>
            <div
                id="action-buttons"
                class="@($"d-flex justify-end gap-4 mt-4 {ActionConfiguration.ActionExtraClass}")">
                <MudButton
                    Variant="@ActionConfiguration.VariantCancelButton"
                    Color="@ActionConfiguration.ColorCancelButton"
                    Class="@ActionConfiguration.CancelButtonExtraClass"
                    OnClick="@(async () => await NavigationService.GoBack())">
                    @LocalizationService.GetValue("CancelButton")
                </MudButton>
                <MudButton
                    Variant="@ActionConfiguration.VariantCreateEditButton"
                    Color="@ActionConfiguration.ColorCreateEditButton"
                    ButtonType="@ActionConfiguration.TypeCreateEditButton"
                    Class="@ActionConfiguration.CreateEditButtonExtraClass"
                    OnClick="@Upsert"
                    Disabled="@Processing">
                    @if (Processing)
                    {
                        <MudProgressCircular
                            Class="ms-n1"
                            Size="Size.Small"
                            Indeterminate="@true"/>
                        <MudText
                            Class="ms-2">
                            @LocalizationService.GetValue("Processing")
                        </MudText>
                    }
                    @LocalizationService.GetValue(EditMode ? "EditButton" : "SaveButton")
                </MudButton>
            </div>
        }
    </MudCard>
</BlaterCascadingValue>