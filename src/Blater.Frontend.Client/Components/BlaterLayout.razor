@using Blater.Frontend.Client.Auto.AutoBuilders.Types
@using Blater.Frontend.Client.Interfaces

<MudLayout>
    <MudAppBar Elevation="1">
        @if (EnabledAppBarLogo)
        {
            <BlaterLogo/>
        }
        @if (EnabledHeaderToggle)
        {
            <MudIconButton Icon="@Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(e => DrawerToggle())"/>
        }
        <MudSpacer/>

        <MudIconButton
            Icon="@Material.Outlined.Notifications"
            Color="Color.Inherit"/>

        <MudSwitch
            Color="Color.Inherit"
            Value="@IsDarkMode"
            ValueChanged="@(async x => await OnSystemPreferenceChanged(x))"
            T="bool"
            Class="ma-4"
            ThumbIcon="@Material.Filled.LightbulbCircle"/>

        <MudText Class="pr-2">
            Olá, Name!
        </MudText>

        <MudAvatar>
            <MudImage Src=""/>
        </MudAvatar>
    </MudAppBar>
    <MudDrawer
        @bind-Open="@_drawerOpen"
        Elevation="2"
        Variant="DrawerVariant.Mini"
        Class="overflow-hidden"
        MiniWidth="50px">

        @if (EnabledDrawerLogo)
        {
            <MudDrawerHeader Class="pa-1 d-flex align-center justify-center">
                @if (_drawerOpen)
                {
                    <BlaterLogo/>
                }
                else
                {
                    <BlaterLogo OnlyIcon="true"/>
                }
            </MudDrawerHeader>
        }

        @{
            foreach (var route in NavigationService.Routes)
            {
                if (route.IsSubMenu)
                {
                    <MudNavGroup
                        Icon="@route.Icon"
                        Title="@route.Name"
                        ExpandIcon="">
                        @foreach (var subRoute in route.ChildRoutes)
                        {
                            <MudNavLink
                                Icon="@subRoute.Icon"
                                Href="@subRoute.Route"
                                Match="NavLinkMatch.Prefix">
                                <MudText>
                                    @subRoute.Name
                                </MudText>
                            </MudNavLink>
                        }
                    </MudNavGroup>
                }
                else
                {
                    <MudNavLink
                        Icon="@route.Icon"
                        Href="@route.Route"
                        Match="NavLinkMatch.Prefix">
                        <MudText>
                            @route.Name
                        </MudText>
                    </MudNavLink>
                }
            }
        }

        <MudSpacer/>

        <MudNavLink
            Icon="@Material.Filled.ExitToApp"
            Match="NavLinkMatch.Prefix"
            IconColor="Color.Error">
            <MudText Color="Color.Error">
                @LocalizationService.GetValue(nameof(LocalizationComponent.Logout))
            </MudText>
        </MudNavLink>
        @if (EnabledBodyToggle)
        {
            <MudIconButton Icon="@Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(e => DrawerToggle())"/>
        }
    </MudDrawer>
    <MudMainContent>
        <MudContainer Class="pa-4" MaxWidth="MaxWidth.ExtraExtraLarge">
            @ChildContent
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {

    //todo: add blater autorized view
    [Parameter]
    public RenderFragment ChildContent { get; set; } = null!;

    [Parameter]
    public bool EnabledBodyToggle { get; set; }

    [Parameter]
    public bool EnabledHeaderToggle { get; set; } = true;

    [Parameter]
    public bool EnabledAppBarLogo { get; set; }

    [Parameter]
    public bool EnabledDrawerLogo { get; set; } = true;

    [Parameter]
    public bool IsDarkMode { get; set; }

    [Parameter]
    public EventCallback<bool> OnDarkModeChanged { get; set; }

    [Inject]
    private ILocalizationService LocalizationService { get; set; } = null!;

    [Inject]
    private INavigationService NavigationService { get; set; } = null!;

    private bool _drawerOpen = true;

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private MudThemeProvider _mudThemeProvider = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(async x => await OnSystemPreferenceChanged(x));
            StateHasChanged();
        }
    }

    private Task OnSystemPreferenceChanged(bool newValue)
    {
        IsDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }

}