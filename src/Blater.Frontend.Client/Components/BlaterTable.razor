@using System.Globalization
@typeparam T where T : Blater.Models.Bases.BaseDataModel

<MudCard Elevation="0" Class="pa-4 mb-2 mud-height-full">
    <MudGrid Spacing="0">
        <MudItem xs="12" Class="d-flex">
            <MudText Typo="Typo.h5">
                @LocalizationService.GetValue($"BlaterTable-Title-{_typeName}")
            </MudText>
            <MudSpacer/>
            @if (EnabledCreateButton)
            {
                <MudIconButton
                    Color="Color.Primary"
                    OnClick="@OnCreate"
                    Variant="Variant.Filled"
                    Icon="@Material.Filled.Add"
                    Size="Size.Medium">
                </MudIconButton>
            }
        </MudItem>
    </MudGrid>
</MudCard>

<MudCard Elevation="0" Class="pa-4">
    <form @onsubmit="Filter">
        <MudGrid Spacing="1">
            <MudItem xs="12">
                <MudText Typo="Typo.h5">
                    @LocalizationService.GetValue($"BlaterTable-FilterValues")
                </MudText>
            </MudItem>
            <MudItem xs="12" lg="3">
                <MudDateRangePicker
                    Variant="Variant.Filled"
                    Clearable="true"
                    Culture="@(new CultureInfo("pt-BR"))"
                    Label="@LocalizationService.GetValue("BlaterTable-Date-Range-Label")"
                    DateRangeChanged="@(x => DateRangeValueChanged(x))"
                    DateRange="@(_dateRange ?? new DateRange())"/>
                <MudSpacer/>
            </MudItem>
        </MudGrid>
    </form>

    <MudTable
        T="T"
        @ref="_mudTable"
        Items="@Items"
        Breakpoint="Breakpoint.Sm"
        Striped="@EnabledStriped"
        MultiSelection="@EnabledMultiSelection"
        SelectOnRowClick="@EnabledSelectOnRowClick"
        SelectionChangeable="@EnabledSelectionChangeable"
        SelectedItemsChanged="@OnSelectedItemsChanged"
        SelectedItemChanged="@OnSelectedItemChanged"
        OnRowClick="@OnRowClick"
        FixedHeader="@EnabledFixedHeader"
        FixedFooter="@EnabledFixedFooter"
        Height="@(EnabledFixedHeader || EnabledFixedFooter ? "70vh" : "")"
        Loading="@_loading"
        LoadingProgressColor="@LoadingProgressColor">
        <HeaderContent>
            @{
                var props = typeof(T).GetProperties();
                foreach (var prop in props)
                {
                    var propName = prop.Name;
                    <MudTh>
                        <MudTableSortLabel
                            SortBy="@CreateSortFunc(propName)"
                            Enabled="@EnabledSortedColumn">
                            @LocalizationService.GetValue($"BlaterTable-ColumnName-{propName}")
                        </MudTableSortLabel>
                        @if (EnabledFilters)
                        {
                            <MudTextField
                                T="object"
                                Label="@LocalizationService.GetValue($"BlaterTable-Filter-{propName}")"
                                Variant="Variant.Outlined"
                                Immediate="true"
                                ValueChanged="@(x => QueryFilter(x, propName))"/>
                        }
                    </MudTh>
                }

                <MudTh/>
            }
        </HeaderContent>
        <RowTemplate>
            @{
                var props = typeof(T).GetProperties();
                foreach (var prop in props)
                {
                    var propName = prop.Name;
                    var propValue = prop.GetValue(context);
                    <MudTd DataLabel="@propName">@propValue</MudTd>
                }

                if (EnabledCustomActions || EnabledDefaultActions)
                {
                    <MudTd>
                        <div class="d-flex align-center justify-center gap-2">
                            @if (EnabledDefaultActions)
                            {
                                <MudIconButton
                                    Icon="@Material.Outlined.RemoveRedEye"
                                    Color="Color.Primary"
                                    OnClick="@(() => OnDetails.InvokeAsync(context))"/>
                                <MudIconButton
                                    Icon="@Material.Outlined.Edit"
                                    Color="Color.Primary"
                                    OnClick="@(() => OnEditChanged.InvokeAsync(context))"/>
                                <MudIconButton
                                    Icon="@(context.Enabled ? Material.Outlined.LockOpen : Material.Outlined.Lock)"
                                    Color="@(context.Enabled ? Color.Primary : Color.Error)"
                                    OnClick="@(() => OnDisabledChanged.InvokeAsync(context))"/>
                            }
                            @if (EnabledCustomActions)
                            {
                                foreach (var item in CustomDataGridActions)
                                {
                                    <MudIconButton
                                        Icon="@item.Icon"
                                        Color="@(item.Color ?? Color.Primary)"
                                        OnClick="@(() => item.OnValueChanged(context))"/>
                                }
                            }
                        </div>
                    </MudTd>
                }
            }
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="@(new[] { 10, 25, 50, 100 })"
                           RowsPerPageString="@("Rows per page:")"
                           InfoFormat="@("{first_item}-{last_item} of {all_items}")"
                           AllItemsText="@("All")"
                           HorizontalAlignment="@HorizontalAlignment.Right"/>
        </PagerContent>
    </MudTable>
</MudCard>