@using Blater.Frontend.Client.Auto.AutoBuilders.Types

@inherits LayoutComponentBase

@layout BlaterMainLayout

<MudLayout>
    @*<BlaterAuthorizeView @ref="@_blaterAuthorizeView">
        <Authorized>
            
        </Authorized>
        
        <NotAuthorized>
            <p>Permission is required access this content</p>
        </NotAuthorized>
    </BlaterAuthorizeView>*@
    @{
        //var blaterUserToken = context.User.GetUserAuthenticated();
        <MudAppBar Elevation="1">
            <MudIconButton Icon="@Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(e => DrawerToggle())"/>
            
            <MudSpacer/>

            <MudList T="string" Class="d-flex gap-2 align-center">
                <MudIconButton
                    Icon="@Material.Outlined.Notifications"
                    Color="Color.Inherit"/>

                <MudDivider Light="true" Absolute="false" FlexItem="true" Vertical="true"/>

                <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@LayoutService.CycleDarkLightModeAsync" aria-label="@(DarkLightModeButtonText)"/>

                <MudDivider Light="true" Absolute="false" FlexItem="true" Vertical="true"/>

                <MudText Class="pr-2">
                    Olá, Name@*@(blaterUserToken.Name)*@!
                </MudText>

                <MudAvatar>
                    <MudImage Src=""/>
                </MudAvatar>
            </MudList>
        </MudAppBar>
    }
    <MudDrawer @bind-Open="@DrawerOpen"
               Elevation="2"
               Variant="DrawerVariant.Mini"
               ClipMode="@(EnableHeaderLogo ? DrawerClipMode.Always : DrawerClipMode.Never)"
               Class="overflow-hidden"
               MiniWidth="50px">
        <MudDrawerHeader Class="pa-1 d-flex align-center justify-center">
            @if (DrawerOpen)
            {
                <BlaterLogo/>
            }
            else
            {
                <BlaterLogo OnlyIcon="true"/>
            }
        </MudDrawerHeader>

        @{
            foreach (var route in NavigationService.Routes)
            {
                if (route.IsSubMenu)
                {
                    <MudNavGroup
                        Icon="@route.Icon"
                        Title="@route.Name"
                        ExpandIcon="">
                        @foreach (var subRoute in route.ChildRoutes)
                        {
                            <MudNavLink
                                Icon="@subRoute.Icon"
                                Href="@subRoute.Route"
                                Match="NavLinkMatch.Prefix">
                                <MudText>
                                    @subRoute.Name
                                </MudText>
                            </MudNavLink>
                        }
                    </MudNavGroup>
                }
                else
                {
                    <MudNavLink
                        Icon="@route.Icon"
                        Href="@route.Route"
                        Match="NavLinkMatch.Prefix">
                        <MudText>
                            @route.Name
                        </MudText>
                    </MudNavLink>
                }
            }
        }

        <MudSpacer/>

        <MudNavLink
            Icon="@Material.Filled.ExitToApp"
            Match="NavLinkMatch.Prefix"
            IconColor="Color.Error">
            <MudText Color="Color.Error">
                @LocalizationService.GetValue(nameof(LocalizationComponent.Logout))
            </MudText>
        </MudNavLink>
    </MudDrawer>
    <MudMainContent>
        <MudContainer Class="pa-4" MaxWidth="MaxWidth.ExtraExtraLarge">
            @Body
        </MudContainer>
    </MudMainContent>
    <MudCard Class="d-flex align-center justify-center pa-2">
        <MudText>
            @LocalizationService.GetValue($"FooterDescription-{TenantData.Name}")
        </MudText>
    </MudCard>
</MudLayout>