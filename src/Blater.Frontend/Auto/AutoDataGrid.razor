@using Blater.Frontend.Services
@using Blater.Interfaces

@typeparam T where T : BaseDataModel

@inject IBlaterDatabaseStoreT<T> DataRepository
@inject LocalizationService LocalizationService
@inject NavigationService NavigationService

<MudCard Elevation="0" Class="pa-4 mb-2">
    <MudGrid Justify="Justify.SpaceBetween" Class="pa-2 align-center">
        <MudText
            Typo="Typo.h5"
            Class="ml-2">
            @LocalizationService.Get($"DataGrid-Title-{_typeName}")
        </MudText>
        @if (CreateButton)
        {
            <MudIconButton
                Color="Color.Primary"
                OnClick="@CreateCallBack"
                Variant="Variant.Filled"
                Size="Size.Medium"
                Icon="@Icons.Material.Filled.Add"
                Class="mr-2">
            </MudIconButton>
        }
    </MudGrid>
</MudCard>

<MudCard Elevation="0" Class="pa-4">
    <form class="d-flex gap-4" @onsubmit="Filter">
        <MudTextField
            T="string"
            Label="@LocalizationService.Get("DataGrid-PaymentId-Label")"
            Placeholder="Pesquisa global"
            Class="mb-6"
            Value="@_search"
            Immediate="false"
            ValueChanged="SearchChanged"
            Clearable="true"
            OnClearButtonClick="() => SearchChanged(string.Empty)"
            Adornment="Adornment.End"
            Variant="Variant.Filled"
            AdornmentIcon="@Icons.Material.Filled.Search"/>
        <MudDateRangePicker
            Variant="Variant.Filled"
            Clearable="true"
            Culture="@(new CultureInfo("pt-BR"))"
            Label="@LocalizationService.Get("DataGrid-Date-Range-Label")"
            DateRangeChanged="DateRangeChanged"
            DateRange="@(_dateRange ?? new DateRange())"/>
    </form>

    <MudDataGrid
        T="T"
        Items="Items"
        Filterable="false"
        Hover="true"
        Elevation="0"
        Loading="@_loading"
        Striped="true"
        FixedHeader="true"
        DragDropColumnReordering="false"
        ShowFilterIcons="false"
        ShowMenuIcon="false"
        SelectedItemsChanged="@(async (HashSet<T> items) => await HandleSelectedItemsChanged(items))">
        <Columns>
            @if (MultiSelection)
            {
                <SelectColumn T="T" ShowInFooter="false" ShowInHeader="true" />
            }
            @foreach (var componentConfiguration in _componentConfigurations)
            {
                <TemplateColumn>
                    <HeaderTemplate>
                        @(LocalizationService.Get($"DataGrid-{typeof(T).Name}-{componentConfiguration.Property!.Name}"))
                    </HeaderTemplate>
                    <CellTemplate>
                        <AutoDynamicComponentBuilder
                            T="T"
                            ComponentConfiguration="componentConfiguration"
                            DisplayType="AutoComponentDisplayType.DataGrid"
                            HasLabel="false"
                            Model="@context.Item"/>
                    </CellTemplate>
                </TemplateColumn>
            }
            @if (ShowCustomActions || ShowDefaultActions)
            {
                <TemplateColumn
                    Filterable="false"
                    CellClass="d-flex justify-end">
                    <CellTemplate>
                        @{
                            if (ShowDefaultActions)
                            {
                                <MudIconButton
                                    Icon="@Icons.Material.Outlined.RemoveRedEye"
                                    Color="Color.Primary"
                                    OnClick="@(() => DetailsCallback.InvokeAsync(context.Item))"/>
                                <MudIconButton
                                    Icon="@Icons.Material.Outlined.Edit"
                                    Color="Color.Primary"
                                    OnClick="@(() => EditCallback.InvokeAsync(context.Item))"/>
                                <MudIconButton
                                    Icon="@(context.Item.Enabled ? Icons.Material.Outlined.LockOpen : Icons.Material.Outlined.Lock)"
                                    Color="@(context.Item.Enabled ? Color.Primary : Color.Error)"
                                    OnClick="@(() => DisableCallback.InvokeAsync(context.Item))"/>
                            }

                            if (ShowCustomActions)
                            {
                                foreach (var item in CustomDataGridActions)
                                {
                                    <MudIconButton
                                        Icon="@item.Icon"
                                        Color="@(item.Color ?? Color.Primary)"
                                        OnClick="@(() => item.CallbackAction(context.Item))"/>
                                }
                            }
                        }
                    </CellTemplate>
                </TemplateColumn>
            }

        </Columns>
        <PagerContent>
            <MudDataGridPager
                T="T"
                RowsPerPageString="@LocalizationService.Get("DataGrid-RowText")"
                InfoFormat="{first_item}-{last_item} de {all_items}"/>
        </PagerContent>
    </MudDataGrid>
</MudCard>