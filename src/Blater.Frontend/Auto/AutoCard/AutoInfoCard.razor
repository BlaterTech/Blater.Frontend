@using Blater.Frontend.Services
@using Blater.Interfaces

@typeparam T where T : Blater.Models.Bases.BaseDataModel

<MudCard Class="d-flex pa-4 align-center">
    <MudCard Elevation="0"
             Class="rounded-lg pa-1">
        <MudIcon
            Size="Size.Large"
            Style="color: var(--mud-palette-primary-lighten )"
            Color="Color.Inherit"
            Icon="@Icon"/>
    </MudCard>

    <MudStack Spacing="0" Class="mx-4">
        <MudText Typo="Typo.body1">@Label</MudText>
        <MudText
            Typo="Typo.h5"
            Color="Color.Inherit"
            Style="color: var(--mud-palette-primary-lighten )">
            @Counter
        </MudText>
    </MudStack>
</MudCard>

@code
{
#pragma warning disable CA2252
    [Inject] private IBlaterDatabaseStoreT<T> DataRepository { get; set; } = null!;
    [Inject] private LocalizationService LocalizationService { get; set; } = null!;
    private string? Label { get; set; }

    [Parameter]
    [EditorRequired]
    public string Icon { get; set; } = null!;


    private int Counter { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Label = LocalizationService.Get($"CardLabel-{OverrideTranslation ?? typeof(T).Name}");

            await InvokeAsync(StateHasChanged);
        }
    }

    [Parameter]
    public Func<IBlaterDatabaseStoreT<T>, Task<int>>? OverrideGetCount { get; set; }

    [Parameter]
    public string? OverrideTranslation { get; set; }

    protected override async Task OnInitializedAsync()
    {
        LocalizationService.LocalizationChanged += UpdateDataGrid;

        void UpdateDataGrid()
        {
            Label = LocalizationService.Get($"CardLabel-{OverrideTranslation ?? typeof(T).Name}");
            InvokeAsync(StateHasChanged);
        }

        if (OverrideGetCount == null)
        {
            var countFromSource = await DataRepository.Count().ConfigureAwait(false);
            Counter = countFromSource.Value;
        }
        else
        {
            var countFromSource = await OverrideGetCount(DataRepository).ConfigureAwait(false);
            Counter = countFromSource;
        }

        await InvokeAsync(StateHasChanged);
    }
#pragma warning restore CA2252
}