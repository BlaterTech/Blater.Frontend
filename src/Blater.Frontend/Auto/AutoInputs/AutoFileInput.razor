@*@inherits Blater.Frontend.Auto.Bases.BaseAutoFormComponent<List<StorageFileInfo>>

@implements Blater.Frontend.Auto.IAutoBuildableComponent
@using Blater.Frontend.Enumerations.AutoModel
@using Blater.Frontend.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging
@using MudBlazor

@inject ISnackbar Snackbar
@inject ILogger<AutoFileInput> Logger
@inject BlobServiceImplementation BlobService
@inject IDownloadFileService DownloadFileService
@inject LocalizationService LocalizationService

<MudText
    Typo="Typo.h6"
    Class="">
@(TitleType != null ? LocalizationService.Get($"FormCreate-{TitleType}-FileInput"): "Anexos")
</MudText>
<MudStack Style="width: 100%">
    <MudFileUpload
        T="IReadOnlyList<IBrowserFile>"
        AppendMultipleFiles
        OnFilesChanged="OnInputFileChanged"
        MaximumFileCount="@MaxFileCount"
        Hidden="@false"
        InputClass="absolute mud-width-full mud-height-full overflow-hidden z-20"
        InputStyle="opacity:0"
        @ondragenter="@SetDragClass"
        @ondragleave="@ClearDragClass"
        @ondragend="@ClearDragClass">
        <ButtonTemplate>
            <MudPaper Height="75px"
                      Outlined="true"
                      Class="@_dragClass">
                <MudGrid
                    Class="pa-4 d-flex justify-center align-center flex-column gap-2"
                    Justify="Justify.Center">
                    <MudIcon
                        Icon="@Icons.Material.Outlined.Upload"
                        Size="MudBlazor.Size.Large"/>
                    <MudText
                        Typo="Typo.h6"
                        Align="Align.Center"
                        Class="">
                        @_message
                    </MudText>
                </MudGrid>
            </MudPaper>
        </ButtonTemplate>
    </MudFileUpload>
</MudStack>
<MudProgressLinear
    Color="Color.Success"
    Value="@_count"
    Class="my-7"
    Min="0"
    Max="_filesImported"
    Size="MudBlazor.Size.Small"
    Rounded="true"/>
<FileDetails
    Files="@Value"
    ContainerName="@ParentId.ToString()"
    EditMode="true"/>

@code {

    [Parameter]
    public int MaxFileSizeMb { get; set; } = 4;

    [Parameter]
    public int MaxFileCount { get; set; } = int.MaxValue;

    [CascadingParameter(Name = "ParentId")]
    public Guid? ParentId { get; set; }

    [Parameter]
    public bool ShowFiles { get; set; }

    [Parameter]
    public string? ContainerPrefix { get; set; }

    [Parameter]
    public string? TitleType { get; set; }

    [Parameter]
    public bool? ContainerPublic { get; set; }

    private string ContainerName => new[] { ContainerPrefix, ParentId.ToString() }.JoinStrings("-");

    public BaseAutoComponentTypeEnumeration ComponentType => AutoFormInputType.AutoFileInput;

    private const string DefaultDragClass = "d-flex justify-center align-center flex-column relative rounded-lg border-2 border-dashed mud-border-primary pa-4 mt-4 mud-width-full mud-height-full z-10";
    private string _dragClass = DefaultDragClass;
    private readonly List<string> _fileNames = [];

    protected override void OnInitialized()
    {
        if (ParentId == null)
        {
            throw new ArgumentNullException(nameof(ParentId));
        }
        
        if (MaxFileCount != int.MaxValue)
        {
            _message = $"Arraste e solte ou selecione no máximo {MaxFileCount} arquivo(s).";
        }

        base.OnInitialized();
    }
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (Value.Count != 0)
        {
            return;
        }
        
        _message = MaxFileCount != int.MaxValue ?
            $"Arraste e solte ou selecione no máximo {MaxFileCount} arquivo(s)." :
            "Arraste e solte o arquivo ou selecione.";
        StateHasChanged();
    }
    
    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        try
        {
            ClearDragClass();
            
            if (e.FileCount <= MaxFileCount && Value.Count < MaxFileCount)
            {
                var files = e.GetMultipleFiles(MaxFileCount);
                foreach (var file in files)
                {
                    _fileNames.Add(file.Name);
                }
                
                await HandleFileSelection(e);
            }
            else
            {
                _error = $"Limite máximo de arquivos atingido ({MaxFileCount}), delete os arquivos que não deseja enviar.";
                _message = $"Limite máximo de arquivos atingido ({MaxFileCount}).";
                Snackbar.Add(_error, Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            _error = ex.Message;
            Logger.LogError(ex.Message, "Failed to upload files on input file changed");
            throw;
        }
    }

    private void SetDragClass()
    {
        _dragClass = $"{DefaultDragClass} mud-border-primary";
    }

    private void ClearDragClass()
    {
        _dragClass = DefaultDragClass;
    }

    private string _error = "";
    private string _message = "Arraste e solte o arquivo ou selecione.";
    private int _count = 0;
    private int _filesImported;

    private async Task HandleFileSelection(InputFileChangeEventArgs e)
    {
        _error = "";
        _message = "";
        _filesImported = 0;
        _count = 0;
        StateHasChanged();
        try
        {
            _message = "Carregamento em andamento...";

            _filesImported = e.FileCount;
            StateHasChanged();

            var files = e.GetMultipleFiles(MaxFileCount);

            await UploadFiles(files);
        }
        catch (IOException ex)
        {
            _error = "O tamanho do arquivo excede o limite máximo permitido de 1 Mb.";
            Logger.LogError(ex, "Failed to upload files");
        }
        catch (Exception invalidOperationException)
        {
            Logger.LogError(invalidOperationException, "Failed to upload files");
            throw;
        }

        StateHasChanged();
    }

    private async Task UploadFiles(IEnumerable<IBrowserFile> files)
    {
        try
        {
            BlobService.Public = ContainerPublic ?? false;

            var storageFiles = new List<StorageFileInfoRequest>();

            foreach (var file in files)
            {
                var fileStream = file.OpenReadStream(MaxFileSizeMb * 1024 * 1024);

                if (file.Size > MaxFileSizeMb * 1024 * 1024)
                {
                    _error = $"O tamanho do arquivo ({file.Name}) excede o limite máximo permitido.";
                    _message = $"Arquivo {file.Name} muito grande...";
                    Logger.LogError($"O tamanho do arquivo ({file.Name}) excede o limite máximo permitido.");
                    continue;
                }

                var base64 = await fileStream.ReadAsBase64();

                storageFiles.Add(new StorageFileInfoRequest
                {
                    Name = file.Name,
                    Extension = Path.GetExtension(file.Name),
                    Container = ContainerName,
                    FileContentBase64 = base64,
                });

                _count++;
            }

            var responseBlobService = await BlobService.UploadFiles(storageFiles);

            Value.AddRange(responseBlobService);
            await ValueChanged.InvokeAsync(Value);

            _message = "Carregamento finalizado!";
        }
        catch (Exception e)
        {
            _message = "Erro ao carregar os arquivos";
            Logger.LogError(e, "Failed to upload files");
        }
    }

}*@