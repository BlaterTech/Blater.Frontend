@inherits Blater.FrontEnd.Auto.Bases.BaseAutoFormComponent<string>
@using Blater.Enumerations.AutoModel
@using Blater.FrontEnd.Services
@using MudBlazor
@implements IAutoBuildableComponent

@inject LocalizationService LocalizationService

<div id="auto-edit-password-input" class="d-flex flex-column gap-4 @ExtraClass">
    <MudText Typo="Typo.h6">
        Senha de acesso
    </MudText>
    <div class="d-flex gap-4">
        <MudTextField
            T="string"
            Disabled="Disabled"
            Class="@ExtraClass"
            Value="@Password1"
            ValueChanged="@Password1Changed"
            Required="@Required"
            Label="@LocalizationService.Get("FormEdit-User-Password")"
            RequiredError="@LocalizationService.Get("AutoEditPasswordInput-RequiredError")"
            Variant="Variant.Filled"
            InputType="@_passwordInput"
            Adornment="Adornment.End"
            Placeholder="@LocalizationService.Get("PlaceholderText-AutoEditPasswordInput")"
            AdornmentIcon="@_passwordInputIcon"
            OnAdornmentClick="ButtonShowPassword"
            AdornmentAriaLabel="Show Password"/>

        <MudTextField
            T="string"
            Disabled="Disabled"
            Class="@ExtraClass"
            Value="@Password2"
            Required="@Required"
            ValueChanged="Password2Changed"
            Label="@LocalizationService.Get("FormEdit-User-ConfirmPassword")"
            Error="@_password2Error"
            ErrorText="@LocalizationService.Get(_password2ErrorText)"
            RequiredError="@ValidationErrorMessage"
            Variant="Variant.Filled"
            InputType="@_passwordInput"
            Adornment="Adornment.End"
            AdornmentIcon="@_passwordInputIcon"
            Placeholder="@LocalizationService.Get("PlaceholderText-AutoEditPasswordInput")"
            OnAdornmentClick="ButtonShowPassword"
            AdornmentAriaLabel="Show Password"/>
    </div>

</div>

@code
{
    public string Password1 { get; set; } = string.Empty;
    public string Password2 { get; set; } = string.Empty;

    string _password2ErrorText = string.Empty;

    bool _password2Error;

    public BaseAutoComponentTypeEnumeration ComponentType => AutoFormInputType.AutoEditPasswordInput;

    bool _isShow;
    InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonShowPassword()
    {
        @if (_isShow)
        {
            _isShow = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _isShow = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    private void Password1Changed(string password1)
    {
        Password1 = password1;
    }

    private async Task Password2Changed(string password2)
    {
        Password2 = password2;

        if (Password1 != Password2)
        {
            _password2ErrorText = "AutoEditPasswordInput-PasswordDoesNotMatchError";
            _password2Error = true;
        }
        else
        {
            _password2ErrorText = string.Empty;
            _password2Error = false;

            //var hashedPassword = BCrypt.Net.BCrypt.HashPassword(Password1);
            await NotifyValueChanged(Password1);
        }
    }
}