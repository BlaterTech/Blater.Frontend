@*@inherits Blater.Frontend.Auto.Bases.BaseAutoFormComponent<Address>
@using Blater.Frontend.Enumerations.AutoModel
@using Blater.Frontend.Services
@using MudBlazor

@implements Blater.Frontend.Auto.IAutoBuildableComponent

@inject LocalizationService LocalizationService
@inject AddressService AddressService

<div id="autoform-field-address">

    <MudText
        Class="my-4"
        Typo="Typo.h6">
        @LocalizationService.Get($"{FormType}-{_nameOf}-Title")
    </MudText>
    <MudGrid>
        <MudItem xs="6">
            <div class="d-flex gap-4">
                <MudTextField
                    T="string"
                    id="@InputId"
                    Disabled="@Disabled"
                    Label="@LocalizationService.Get($"{FormType}-{_nameOf}-PostalCode")"
                    @bind-Value="@Value.PostalCode"
                    Immediate="true"
                    Variant="@Variant.Filled"
                    Placeholder="@LocalizationService.Get($"PlaceholderText-{_nameOf}-PostalCode")"
                    Error="@HasValidationError"
                    HelperText="Digite o CEP e clique no ícone para buscar seu endereço."
                    Required="true"
                    RequiredError="@LocalizationService.Get("Required-Address-PostalCode")"
                    ErrorText="@ValidationErrorSummary"/>
                @if (!_loadingCep)
                {
                    <MudFab
                        StartIcon="@Icons.Material.Outlined.Search"
                        Color="Color.Primary"
                        Class="mt-4"
                        Size="MudBlazor.Size.Small"
                        OnClick="@SearchCep"/>
                }
                @if (_loadingCep)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                }
            </div>
        </MudItem>

        <MudItem xs="6">
            <MudSelect
                T="string"
                ValueChanged="StateSelectCallback"
                Disabled="@Disabled"
                Label="@LocalizationService.Get($"{FormType}-{_nameOf}-State")"
                Variant="@Variant.Filled"
                Placeholder="@LocalizationService.Get($"PlaceholderText-{_nameOf}-State")"
                AnchorOrigin="Origin.BottomCenter"
                Required="@Required"
                RequiredError="@LocalizationService.Get("Required-Address-State")"
                ErrorText="@ValidationErrorSummary"
                Value="@Value.State">
                @if (_statesData.Any())
                {
                    @foreach (var state in States.List)
                    {
                        <MudSelectItem T="string" Value="@state.Name"/>
                    }
                }
            </MudSelect>
        </MudItem>

        <MudItem xs="6">
            <MudSelect
                T="string"
                Disabled="@Disabled"
                Label="@LocalizationService.Get($"{FormType}-{_nameOf}-City")"
                Variant="@Variant.Filled"
                Placeholder="@LocalizationService.Get($"PlaceholderText-{_nameOf}-City")"
                AnchorOrigin="Origin.BottomCenter"
                @bind-Value="@Value.City">
                @if (_cities.Any())
                {
                    @foreach (var city in _cities)
                    {
                        <MudSelectItem
                            T="string"
                            Value="@city.Nome"/>
                    }
                }
            </MudSelect>
        </MudItem>

        <MudItem xs="6">
            <MudTextField
                T="string"
                id="@InputId"
                @bind-Value="@(Value.District)"
                InputType="InputType.Text"
                Label="@LocalizationService.Get($"{FormType}-{_nameOf}-District")"
                Placeholder="@LocalizationService.Get($"PlaceholderText-{_nameOf}-District")"
                Disabled="@Disabled"
                Variant="@Variant.Filled"
                Error="@HasValidationError"
                Required="true"
                RequiredError="@LocalizationService.Get("Required-Address-District")"
                ErrorText="@ValidationErrorSummary"/>
        </MudItem>

        <MudItem xs="6">
            <MudTextField
                T="string"
                id="@InputId"
                @bind-Value="@(Value.Street)"
                InputType="InputType.Text"
                Placeholder="@LocalizationService.Get($"PlaceholderText-{_nameOf}-Street")"
                Disabled="@Disabled"
                Label="@LocalizationService.Get($"{FormType}-{_nameOf}-Street")"
                Variant="@Variant.Filled"
                Error="@HasValidationError"
                Required="true"
                RequiredError="@LocalizationService.Get("Required-Address-Street")"
                ErrorText="@ValidationErrorSummary"/>
        </MudItem>

        <MudItem xs="6">
            <MudTextField
                T="string"
                id="@InputId"
                @bind-Value="@(Value.Number)"
                InputType="InputType.Text"
                Placeholder="@LocalizationService.Get($"PlaceholderText-{_nameOf}-Number")"
                Disabled="@Disabled"
                Label="@LocalizationService.Get($"{FormType}-{_nameOf}-Number")"
                Variant="@Variant.Filled"
                Error="@HasValidationError"
                Required="true"
                RequiredError="@LocalizationService.Get("Required-Address-Number")"
                ErrorText="@ValidationErrorSummary"/>
        </MudItem>

        <MudItem xs="6">
            <MudTextField
                T="string"
                id="@InputId"
                @bind-Value="@(Value.Complement)"
                InputType="InputType.Text"
                Placeholder="@LocalizationService.Get($"PlaceholderText-{_nameOf}-Complement")"
                Disabled="@Disabled"
                Label="@LocalizationService.Get($"{FormType}-{_nameOf}-Complement")"
                Variant="@Variant.Filled"
                Error="@HasValidationError"
                ErrorText="@ValidationErrorSummary"/>
        </MudItem>
    </MudGrid>

</div>

@code {

    private string FormType => EditMode ? "FormEdit" : "FormCreate";
    private readonly string _nameOf = nameof(Address);
    private List<GetCitiesResponse> _cities = [];
    private List<GetStatesResponse> _statesData = [];
    private bool _loadingCep = false;

    protected override async void OnInitialized()
    {
        _statesData = await AddressService.GetStates() ?? new List<GetStatesResponse>();

        /*AttCities();*/

        StateHasChanged();
    }

    private async Task AttCities(string uf)
    {
        /*var stateDataEntry = _statesData
            .FirstOrDefault(x => x.LongName == Value.State);

        _cities = stateDataEntry != null ? stateDataEntry.Cities : [];*/
        _cities = await AddressService.GetCities(uf) ?? new List<GetCitiesResponse>();
        foreach (var city in _cities)
        {
            Console.WriteLine(city);
        }

        StateHasChanged();
    }

    private async Task StateSelectCallback(string? obj)
    {
        if (string.IsNullOrWhiteSpace(obj)) return;
        Console.WriteLine("a");
        Value.State = obj;
        Value.City = "";

        await AttCities(Value.State);
        await NotifyValueChanged();
    }

    private async Task SearchCep()
    {
        _loadingCep = true;
        StateHasChanged();
        var search = await AddressService.GetCep(Value.PostalCode);

        if (search != null)
        {
            var value = _statesData
               .FirstOrDefault(x => x.Abbreviation == search.State);

            if (value != null)
            {
                await AttCities(Value.State);
                Value.State = value.Name ?? string.Empty;
                Value.Number = string.Empty;
                Value.City = search.City      ?? string.Empty;
                Value.Street = search.Address ?? string.Empty;
                Value.Complement = string.Empty;
                Value.District = search.District ?? string.Empty;

                _loadingCep = false;
                StateHasChanged();
                await NotifyValueChanged();
            }
        }
    }

    public int Priority => 1000;
    public BaseAutoComponentTypeEnumeration ComponentType => AutoFormInputType.AutoAddressInput;

    public Type? GenericComponentType { get; set; }
    //public List<AutoComponentsBuilders.BuildableGenericComponentArgumentsInfo>? Arguments { get; set; }
    //public BaseAutoComponentTypeEnumeration ComponentType { get; set; }
}*@